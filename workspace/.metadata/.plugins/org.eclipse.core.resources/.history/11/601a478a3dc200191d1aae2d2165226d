package drawpic;
import java.awt.*;
import java.awt.font.*;
import java.awt.image.*;
import java.util.*;

import javax.swing.*;

/**
 * 
 * @author ASUS
 *
 * @time 下午5:36:30
 *
 * @description 代替canvas用来绘图的板子
 *
 */

@SuppressWarnings("serial")
public class CanPaintLabel extends JLabel{
	private static final double pi = 3.1415926535;
	int selectButton;//选择的工具
	int times;//放大倍数
	int x,y;//绘图的起始位置
	int x1,y1;//绘图的终止位置
	String font;//字体
	int blacker;//加粗
	int underer;//下划线
	int leaner;//斜体
	int fontsize;//字体大小
	int size;//图像大小
	Color fore;//前景色
	Color back;//背景色
	int flag;//用以判断是否需要paint其他的组件
	BufferedImage image;
	Graphics2D bg;
	BufferedImage teImage;
	Graphics2D gg;
	int temx,temy,temw,temh;//记录image存在时在该组件中的位置
	
	public CanPaintLabel() {
		//在这里传入参数,可以自己设定一些参数
		setOpaque(true);
		setBackground(Color.WHITE);
		setPreferredSize(new Dimension(1000,500));
		selectButton = 9; times = 1;
		x = 0; y = 0;
		x1 = 0; y1 = 0;
		font = "Arial"; blacker = 0; underer = 0; leaner = 0;
		fontsize = 16;size = 3;
		fore = new Color(0,0,0);
		back = new Color(255,255,255);
		flag = -1;
		image = new BufferedImage(1000,500,BufferedImage.TYPE_INT_RGB);
		bg = (Graphics2D)image.getGraphics();
		bg.setColor(back);
		bg.fillRect(0, 0, image.getWidth(), image.getHeight());
		bg.setColor(fore);
		teImage = null;
		gg = null;
	}
	
	public void setProperty(int se,int ti,String fo,
			int bl,int un,int le,int fs,int si,Color fore,Color ba) {
		selectButton = se; times = ti;
		font = fo; blacker = bl; underer = un; leaner = le;
		fontsize = fs;
		size = si;
		this.fore = fore;
		back = ba;
	}
	@Override
    public void paintComponent(Graphics g1) {
		//在这里绘制我们想要的东西,可以通过updateUI()更新图像
		super.paintComponent(g1);
		if(flag == 1 ) {
			HashMap<TextAttribute, Object> hm = new HashMap<TextAttribute, Object>();
			if(underer == 1) {
				hm.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON); // 定义有下划线
			}
			if(leaner == 1) {
				hm.put(TextAttribute.POSTURE, TextAttribute.POSTURE_OBLIQUE);//设置倾斜
			}
			if(blacker == 1) {
				hm.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);//设置加粗
			}
			hm.put(TextAttribute.SIZE, size); // 定义字号
			hm.put(TextAttribute.FAMILY, font); // 定义字体名
			bg.setFont(new Font(hm));
			bg.setColor(fore);
			switch(selectButton) {
			case 0:{
				bg.setColor(fore);
				bg.fillOval(x-size, y-size, 2*size+1, 2*size+1);
				int xabs;
				int yabs;
				if(y1 != y) {
					double m = ((double)(x-x1))/(y1-y);
					double tex = Math.sqrt((2*size+1)/2.0*(2*size+1)/2.0/(m*m+1))+x;
					double tey = m*(tex-x)+y;
					xabs = (int)(tex-x);
					yabs = (int)(tey-y);
					if(xabs>0) {
						xabs+=1;
					}
					else if(xabs<0) {
						xabs-=1;
					}
					if(yabs>0) {
						yabs+=1;
					}
					else if(yabs<0) {
						yabs-=1;
					}
				}
				else {
					xabs = 0;
					yabs = size;
				}
				int[] xpoint = new int[] {x-xabs,x+xabs,x1+xabs,x1-xabs};
				int[] ypoint = new int[] {y-yabs,y+yabs,y1+yabs,y1-yabs};
				bg.fillPolygon(xpoint, ypoint, 4);
				x1 = x;
				y1 = y;
				break;
				}
			case 1:{
				int sx=0;
				int sy=0;
				if(x1>x) {
					sx = x;
				}
				else {
					sx = x1;
				}
				if(y1>y) {
					sy = y;
				}
				else {
					sy = y1;
				}
				teImage = new BufferedImage(Math.abs(x-x1)+5,Math.abs(y-y1)+5,
						BufferedImage.TYPE_INT_ARGB);
				gg = (Graphics2D)teImage.getGraphics();
				gg.setColor(Color.BLACK);
				for(int i=1;i<=5;i=i+2) {
					gg.drawLine(teImage.getWidth()*(i-1)/5, 0, teImage.getWidth()*i/5, 0);
					gg.drawLine(teImage.getWidth()*(i-1)/5, teImage.getHeight()-1,
							teImage.getWidth()*i/5, teImage.getHeight()-1);
					gg.drawLine(0, teImage.getHeight()*(i-1)/5, 0, teImage.getHeight()*i/5);
					gg.drawLine(teImage.getWidth()-1, teImage.getHeight()*(i-1)/5, 
							teImage.getWidth()-1, teImage.getHeight()*i/5);
				}
				gg.setColor(fore);
				gg.fillOval(2, 2, teImage.getWidth()-5, teImage.getHeight()-5);
				if(teImage.getWidth()-5-2*size>0&&teImage.getHeight()-5-2*size>0) {
					gg.setComposite(AlphaComposite.getInstance(AlphaComposite.CLEAR));
					gg.fillOval(2+size, 2+size, teImage.getWidth()-5-2*size, 
							teImage.getHeight()-5-2*size);
				}
				temx = sx-2;temy = sy-2;temw = teImage.getWidth();temh = teImage.getHeight();
				break;
			}
			case 2:{
				int sx=0;
				int sy=0;
				if(x1>x) {
					sx = x;
				}
				else {
					sx = x1;
				}
				if(y1>y) {
					sy = y;
				}
				else {
					sy = y1;
				}
				teImage = new BufferedImage(Math.abs(x-x1)+5,Math.abs(y-y1)+5,
						BufferedImage.TYPE_INT_ARGB);
				gg = (Graphics2D)teImage.getGraphics();
				gg.setColor(Color.BLACK);
				for(int i=1;i<=5;i=i+2) {
					gg.drawLine(teImage.getWidth()*(i-1)/5, 0, teImage.getWidth()*i/5, 0);
					gg.drawLine(teImage.getWidth()*(i-1)/5, teImage.getHeight()-1,
							teImage.getWidth()*i/5, teImage.getHeight()-1);
					gg.drawLine(0, teImage.getHeight()*(i-1)/5, 0, teImage.getHeight()*i/5);
					gg.drawLine(teImage.getWidth()-1, teImage.getHeight()*(i-1)/5, 
							teImage.getWidth()-1, teImage.getHeight()*i/5);
				}
				gg.setColor(fore);
				gg.fillRoundRect(2, 2, teImage.getWidth()-5, teImage.getHeight()-5,
						(teImage.getWidth()-5)/5,(teImage.getHeight()-5)/5);
				if(teImage.getWidth()-5-2*size>0&&teImage.getHeight()-5-2*size>0) {
					gg.setComposite(AlphaComposite.getInstance(AlphaComposite.CLEAR));
					gg.fillRoundRect(2+size, 2+size, teImage.getWidth()-5-2*size, 
							teImage.getHeight()-5-2*size,(teImage.getWidth()-5-2*size)/5,
							(teImage.getHeight()-5-2*size)/5);
				}
				temx = sx-2;temy = sy-2;temw = teImage.getWidth();temh = teImage.getHeight();
				break;
			}
			case 3:break;
			case 4:{//此处仍有bug
				int sx=0;
				int sy=0;
				if(x1>x) {
					sx = x;
				}
				else {
					sx = x1;
				}
				if(y1>y) {
					sy = y;
				}
				else {
					sy = y1;
				}
				teImage = new BufferedImage(Math.abs(x-x1)+5,Math.abs(y-y1)+5,
						BufferedImage.TYPE_INT_ARGB);
				gg = (Graphics2D)teImage.getGraphics();
				gg.setColor(Color.BLACK);
				for(int i=1;i<=5;i=i+2) {
					gg.drawLine(teImage.getWidth()*(i-1)/5, 0, teImage.getWidth()*i/5, 0);
					gg.drawLine(teImage.getWidth()*(i-1)/5, teImage.getHeight()-1,
							teImage.getWidth()*i/5, teImage.getHeight()-1);
					gg.drawLine(0, teImage.getHeight()*(i-1)/5, 0, teImage.getHeight()*i/5);
					gg.drawLine(teImage.getWidth()-1, teImage.getHeight()*(i-1)/5, 
							teImage.getWidth()-1, teImage.getHeight()*i/5);
				}
				gg.setColor(fore);
				double tr;
				if(x1-x == 0) {
					if(y1-y >0) {
						tr = pi/2;
					}
					else if(y1-y < 0) {
						tr = -pi/2;
					}
					else {
						tr = 0;
					}
					gg.drawArc(2, 2, teImage.getWidth()-5, teImage.getHeight()-5,
							(int)(180*tr/pi),180);
				}
				else if(y1-y == 0) {
					tr = 0;
					gg.drawArc(2, 2, teImage.getWidth()-5, teImage.getHeight()-5,
							(int)(180*tr/pi),180);
				}
				else {
					tr = -Math.atan(((double)(y1-y))/(x1-x));
					gg.fillArc(2, 2, teImage.getWidth()-5, teImage.getHeight()-5,
						(int)(180*tr/pi)*((x1-x)/Math.abs(x1-x)),
						180*((x1-x)/Math.abs(x1-x))*((y1-y)/Math.abs(y1-y)));
					if(teImage.getWidth()-5-2*size>0&&teImage.getHeight()-5-2*size>0) {
						gg.setComposite(AlphaComposite.getInstance(AlphaComposite.CLEAR));
						gg.fillArc(2+size, 2+size, teImage.getWidth()-5-2*size, 
								teImage.getHeight()-5-2*size,
								(int)(180*tr/pi)*((x1-x)/Math.abs(x1-x)),
								180*((x1-x)/Math.abs(x1-x))*((y1-y)/Math.abs(y1-y)));
					}
				}
				
				temx = sx-2;temy = sy-2;temw = teImage.getWidth();temh = teImage.getHeight();
				break;
			}
			case 5:{
				bg.setColor(back);
				bg.fillOval(x-size, y-size, 2*size+1, 2*size+1);
				int xabs;
				int yabs;
				if(y1 != y) {
					double m = ((double)(x-x1))/(y1-y);
					double tex = Math.sqrt((2*size+1)/2.0*(2*size+1)/2.0/(m*m+1))+x;
					double tey = m*(tex-x)+y;
					xabs = (int)(tex-x);
					yabs = (int)(tey-y);
					if(xabs>0) {
						xabs+=1;
					}
					else if(xabs<0) {
						xabs-=1;
					}
					if(yabs>0) {
						yabs+=1;
					}
					else if(yabs<0) {
						yabs-=1;
					}
				}
				else {
					xabs = 0;
					yabs = size;
				}
				int[] xpoint = new int[] {x-xabs,x+xabs,x1+xabs,x1-xabs};
				int[] ypoint = new int[] {y-yabs,y+yabs,y1+yabs,y1-yabs};
				bg.fillPolygon(xpoint, ypoint, 4);
				x1 = x;
				y1 = y;
				break;
				}
			case 6:break;
			case 7:break;
			case 8:{
				int sx=0;
				int sy=0;
				if(x1>x) {
					sx = x;
				}
				else {
					sx = x1;
				}
				if(y1>y) {
					sy = y;
				}
				else {
					sy = y1;
				}
				teImage = new BufferedImage(Math.abs(x-x1)+5,Math.abs(y-y1)+5,
						BufferedImage.TYPE_INT_ARGB);
				gg = (Graphics2D)teImage.getGraphics();
				gg.setColor(Color.BLACK);
				for(int i=1;i<=5;i=i+2) {
					gg.drawLine(teImage.getWidth()*(i-1)/5, 0, teImage.getWidth()*i/5, 0);
					gg.drawLine(teImage.getWidth()*(i-1)/5, teImage.getHeight()-1,
							teImage.getWidth()*i/5, teImage.getHeight()-1);
					gg.drawLine(0, teImage.getHeight()*(i-1)/5, 0, teImage.getHeight()*i/5);
					gg.drawLine(teImage.getWidth()-1, teImage.getHeight()*(i-1)/5, 
							teImage.getWidth()-1, teImage.getHeight()*i/5);
				}
				gg.setColor(fore);
				int xabs;
				int yabs;
				if(y1 != y) {
					double m = ((double)(x-x1))/(y1-y);
					double tex = Math.sqrt(size/2.0*size/2.0/(m*m+1))+x;
					double tey = m*(tex-x)+y;
					xabs = (int)(tex-x);
					yabs = (int)(tey-y);
					if(xabs>0) {
						xabs+=1;
					}
					else if(xabs<0) {
						xabs-=1;
					}
					if(yabs>0) {
						yabs+=1;
					}
					else if(yabs<0) {
						yabs-=1;
					}
				}
				else {
					xabs = 0;
					yabs = (size-1)/2+1;
				}
				if(size != 1) {
					int[] xpoint = new int[] {x-Math.min(x1, x)-xabs,x-Math.min(x1, x)+xabs,
							x1-Math.min(x1, x)+xabs,x1-Math.min(x1, x)-xabs};
					int[] ypoint = new int[] {y-Math.min(y1, y)-yabs,y-Math.min(y1, y)+yabs,
							y1-Math.min(y1, y)+yabs,y1-Math.min(y1, y)-yabs};
					gg.fillPolygon(xpoint, ypoint, 4);
				}
				else {
					gg.drawLine(x1 - (Math.min(x1, x)-3), y1 - (Math.min(y1, y)-3),
							x - (Math.min(x1, x)-3),  y - (Math.min(y1, y)-3));
				}
				temx = sx-2;temy = sy-2;temw = teImage.getWidth();temh = teImage.getHeight();
				break;
			}
			case 9:{
				bg.setColor(fore);
				bg.fillOval(x-(size-1)/2, y-(size-1)/2, size, size);
				int xabs;
				int yabs;
				if(y1 != y) {
					double m = ((double)(x-x1))/(y1-y);
					double tex = Math.sqrt(size/2.0*size/2.0/(m*m+1))+x;
					double tey = m*(tex-x)+y;
					xabs = (int)(tex-x);
					yabs = (int)(tey-y);
					if(xabs>0) {
						xabs+=1;
					}
					else if(xabs<0) {
						xabs-=1;
					}
					if(yabs>0) {
						yabs+=1;
					}
					else if(yabs<0) {
						yabs-=1;
					}
				}
				else {
					xabs = 0;
					yabs = (size-1)/2+1;
				}
				if(size != 1) {
					int[] xpoint = new int[] {x-xabs,x+xabs,x1+xabs,x1-xabs};
					int[] ypoint = new int[] {y-yabs,y+yabs,y1+yabs,y1-yabs};
					bg.fillPolygon(xpoint, ypoint, 4);
				}
				else {
					bg.drawLine(x, y, x1, y1);
				}
				x1 = x;
				y1 = y;
				break;
				}
			case 10:{
				int sx=0;
				int sy=0;
				if(x1>x) {
					sx = x;
				}
				else {
					sx = x1;
				}
				if(y1>y) {
					sy = y;
				}
				else {
					sy = y1;
				}
				teImage = new BufferedImage(Math.abs(x-x1)+5,Math.abs(y-y1)+5,
						BufferedImage.TYPE_INT_ARGB);
				gg = (Graphics2D)teImage.getGraphics();
				gg.setColor(Color.BLACK);
				for(int i=1;i<=5;i=i+2) {
					gg.drawLine(teImage.getWidth()*(i-1)/5, 0, teImage.getWidth()*i/5, 0);
					gg.drawLine(teImage.getWidth()*(i-1)/5, teImage.getHeight()-1,
							teImage.getWidth()*i/5, teImage.getHeight()-1);
					gg.drawLine(0, teImage.getHeight()*(i-1)/5, 0, teImage.getHeight()*i/5);
					gg.drawLine(teImage.getWidth()-1, teImage.getHeight()*(i-1)/5, 
							teImage.getWidth()-1, teImage.getHeight()*i/5);
				}
				gg.setColor(fore);
				gg.fillRect(2, 2, teImage.getWidth()-5, teImage.getHeight()-5);
				if(teImage.getWidth()-5-2*size>0&&teImage.getHeight()-5-2*size>0) {
					gg.setComposite(AlphaComposite.getInstance(AlphaComposite.CLEAR));
					gg.fillRect(2+size, 2+size, teImage.getWidth()-5-2*size, 
							teImage.getHeight()-5-2*size);
				}
				temx = sx-2;temy = sy-2;temw = teImage.getWidth();temh = teImage.getHeight();
				break;
			}
			case 11:{
				if(x>this.getPreferredSize().width) {
					x = this.getPreferredSize().width;
				}
				else if(x<0) {
					x = 0;
				}
				if(y>this.getPreferredSize().height) {
					y = this.getPreferredSize().height;
				}
				else if(y<0) {
					y = 0;
				}
				int sx=0;
				int sy=0;
				if(x1>x) {
					sx = x;
				}
				else {
					sx = x1;
				}
				if(y1>y) {
					sy = y;
				}
				else {
					sy = y1;
				}
				teImage = new BufferedImage(Math.abs(x-x1)+5,Math.abs(y-y1)+5,
						BufferedImage.TYPE_INT_ARGB);
				gg = (Graphics2D)teImage.getGraphics();
				gg.setColor(Color.BLACK);
				for(int i=1;i<=5;i=i+2) {
					gg.drawLine(teImage.getWidth()*(i-1)/5, 0, teImage.getWidth()*i/5, 0);
					gg.drawLine(teImage.getWidth()*(i-1)/5, teImage.getHeight()-1,
							teImage.getWidth()*i/5, teImage.getHeight()-1);
					gg.drawLine(0, teImage.getHeight()*(i-1)/5, 0, teImage.getHeight()*i/5);
					gg.drawLine(teImage.getWidth()-1, teImage.getHeight()*(i-1)/5, 
							teImage.getWidth()-1, teImage.getHeight()*i/5);
				}
				temx = sx-2;temy = sy-2;temw = teImage.getWidth();temh = teImage.getHeight();
				break;
			}
			case 12:{
				int rx;
				int ry;
				bg.setColor(fore);
				for(int i=0;i<50;i++) {
					rx = (int)(Math.random()*(size+1)*5/2)-1;
					ry = (int)(Math.random()*(size+1)*5/2)-1;
					bg.drawLine(x+rx, y+ry, x+rx, y+ry);
				}
				break;
			}
			case 13:break;
			default:break;
			}
		}
		else if(flag == 0){
			BufferedImage temp = new BufferedImage(this.getPreferredSize().width,
					this.getPreferredSize().height,BufferedImage.TYPE_INT_RGB);
			Graphics2D te = (Graphics2D)temp.getGraphics();
			te.setColor(back);
			te.fillRect(0, 0, temp.getWidth(), temp.getHeight());
			if(this.getPreferredSize().width>image.getWidth()&&
					this.getPreferredSize().height>image.getHeight()) {
				te.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null);
			}
			else if(this.getPreferredSize().width>image.getWidth()&&
					this.getPreferredSize().height<=image.getHeight()) {
				BufferedImage a = image.getSubimage(0, 0, image.getWidth(),
						this.getPreferredSize().height);
				te.drawImage(a, 0, 0, a.getWidth(), a.getHeight(), null);
			}
			else if(this.getPreferredSize().width<=image.getWidth()&&
					this.getPreferredSize().height>image.getHeight()) {
				BufferedImage a = image.getSubimage(0, 0, 
						this.getPreferredSize().width,image.getHeight());
				te.drawImage(a, 0, 0, a.getWidth(), a.getHeight(), null);
			}
			else {
				BufferedImage a = image.getSubimage(0, 0, 
						this.getPreferredSize().width,this.getPreferredSize().height);
				te.drawImage(a, 0, 0, a.getWidth(), a.getHeight(), null);
			}
			image = temp;
			bg = te;
		}
		g1.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null);
		if(teImage != null) {
			g1.drawImage(teImage, temx, temy, temw, temh, null);
		}
	}
}
